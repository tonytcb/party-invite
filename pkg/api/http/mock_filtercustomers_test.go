// Code generated by MockGen. DO NOT EDIT.
// Source: filtercustomershandler.go
//
// Generated by this command:
//
//	mockgen -source=filtercustomershandler.go -destination=mock_filtercustomers_test.go -package=http CustomersFileParser,FilterCustomersUsecase,FilterCustomersCache
//
// Package http is a generated GoMock package.
package http

import (
	context "context"
	io "io"
	reflect "reflect"

	decimal "github.com/shopspring/decimal"
	domain "github.com/tonytcb/party-invite/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomersFileParser is a mock of CustomersFileParser interface.
type MockCustomersFileParser struct {
	ctrl     *gomock.Controller
	recorder *MockCustomersFileParserMockRecorder
}

// MockCustomersFileParserMockRecorder is the mock recorder for MockCustomersFileParser.
type MockCustomersFileParserMockRecorder struct {
	mock *MockCustomersFileParser
}

// NewMockCustomersFileParser creates a new mock instance.
func NewMockCustomersFileParser(ctrl *gomock.Controller) *MockCustomersFileParser {
	mock := &MockCustomersFileParser{ctrl: ctrl}
	mock.recorder = &MockCustomersFileParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomersFileParser) EXPECT() *MockCustomersFileParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockCustomersFileParser) Parse(arg0 context.Context, arg1 io.Reader) (domain.Customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(domain.Customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockCustomersFileParserMockRecorder) Parse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockCustomersFileParser)(nil).Parse), arg0, arg1)
}

// MockFilterCustomersUsecase is a mock of FilterCustomersUsecase interface.
type MockFilterCustomersUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFilterCustomersUsecaseMockRecorder
}

// MockFilterCustomersUsecaseMockRecorder is the mock recorder for MockFilterCustomersUsecase.
type MockFilterCustomersUsecaseMockRecorder struct {
	mock *MockFilterCustomersUsecase
}

// NewMockFilterCustomersUsecase creates a new mock instance.
func NewMockFilterCustomersUsecase(ctrl *gomock.Controller) *MockFilterCustomersUsecase {
	mock := &MockFilterCustomersUsecase{ctrl: ctrl}
	mock.recorder = &MockFilterCustomersUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterCustomersUsecase) EXPECT() *MockFilterCustomersUsecaseMockRecorder {
	return m.recorder
}

// ByNearLocation mocks base method.
func (m *MockFilterCustomersUsecase) ByNearLocation(ctx context.Context, customers domain.Customers, baseLocation *domain.Coordinate, nearDistanceFilter decimal.Decimal, orderBy domain.OrderBy) (domain.Customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByNearLocation", ctx, customers, baseLocation, nearDistanceFilter, orderBy)
	ret0, _ := ret[0].(domain.Customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByNearLocation indicates an expected call of ByNearLocation.
func (mr *MockFilterCustomersUsecaseMockRecorder) ByNearLocation(ctx, customers, baseLocation, nearDistanceFilter, orderBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByNearLocation", reflect.TypeOf((*MockFilterCustomersUsecase)(nil).ByNearLocation), ctx, customers, baseLocation, nearDistanceFilter, orderBy)
}

// MockFilterCustomersCache is a mock of FilterCustomersCache interface.
type MockFilterCustomersCache struct {
	ctrl     *gomock.Controller
	recorder *MockFilterCustomersCacheMockRecorder
}

// MockFilterCustomersCacheMockRecorder is the mock recorder for MockFilterCustomersCache.
type MockFilterCustomersCacheMockRecorder struct {
	mock *MockFilterCustomersCache
}

// NewMockFilterCustomersCache creates a new mock instance.
func NewMockFilterCustomersCache(ctrl *gomock.Controller) *MockFilterCustomersCache {
	mock := &MockFilterCustomersCache{ctrl: ctrl}
	mock.recorder = &MockFilterCustomersCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterCustomersCache) EXPECT() *MockFilterCustomersCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFilterCustomersCache) Get(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFilterCustomersCacheMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFilterCustomersCache)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockFilterCustomersCache) Save(arg0 context.Context, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFilterCustomersCacheMockRecorder) Save(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFilterCustomersCache)(nil).Save), arg0, arg1, arg2)
}
